/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


&mt {
  //  flavor = "tap-preferred";
   // tapping_term_ms = <200>;
};

/ { 

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

    };

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp ESC>;
        };
        
         combo_tab {
            timeout-ms = <50>;
            key-positions = <6 7>;
            bindings = <&kp TAB>;
        };
               
        combo_backspace {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&kp BSPC>;
        };
       
        combo_delete {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&kp DEL>;
        };

        combo_enter {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp ENTER>;
        };

        combo_z {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp Z>;
        };

        combo_q {
            timeout-ms = <50>;
            key-positions = <28 29>;
            bindings = <&kp Q>;
        };
 
    };



    keymap {
            compatible = "zmk,keymap";
            
        default_layer {
    bindings = <
    &kp J &kp G &kp M &kp P &kp V 						&hm MINUS EQUAL &hm QMARK SLASH &hm EXCL DOT &hm UNDER COMMA &hm DQT SQT 
    &hm LSHFT R &hm LGUI S &hm LCTRL N &hm LALT D &kp B 	    &hm COLON SEMI &hm RALT A &hm RCTRL E &hm RGUI I &hm RSHFT H
    &kp X &kp F &kp L &kp C &kp W				        &hm DLLR N0 &kp U  &kp O &kp Y &kp K
                    &kp LSHIFT &kp T  				    &kp SPC &to 1 
    >;
    };

        symbols_layer {
    bindings = <
    &kp ESC  &kp ATSN   &kp LS(N3) &kp DLLR   &kp PRCNT		&kp CARET &kp AMPS &kp STAR &kp PLUS &kp PIPE 
    &kp TAB    &kp PLUS    &kp LA(RBKT)      &kp LA(LS(RBKT))   &kp SQT     &kp BSLH &kp LT &kp LPRN  &kp RPRN  &kp GT
    &kp TILDE    &kp LA(N3) 	&kp LA(LBKT) &kp LA(LS(LBKT))   &kp DQT 	&to 3 &kp LBKT &kp LBRC &kp RBRC &kp RBKT  
                                                           &to 0  &to 2     &none &to 3 
    >;
    };	

        num_layer {
    bindings = <
    &none &none &kp UP &none &none              &kp BSLH &kp N7 &kp N8 &kp N9 &kp PLUS
    &none &kp LEFT &kp DOWN &kp RIGHT &none     &kp N0 &kp N4 &kp N5 &kp N6 &kp MINUS
    &none &none &none &none &none               &kp DOT &kp N1 &kp N2 &kp N3 &kp STAR
                        &to 0 &to 0             &to 0 &to 0
    >;
    };

        bt_layer {
    bindings = <
    &none &none &none &none &bt BT_CLR      &none &none &none &none &none
    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3 &bt BT_SEL 4   &none  &none &none &none &none
    &none &none &none &none &none &none &none &none &none &none
                        &to 0 &to 0             &to 0 &to 0
    >;
    };
        
	};
};
